service: serverless-task-manager

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1

functions:
  registerUser:
    handler: src/handlers/auth.registerUser
    events:
      - http:
          path: register
          method: post
          cors: true

  getTasks:
    handler: src/handlers/tasks.getTasks
    events:
      - http:
          path: tasks
          method: get
          cors: true

  createTask:
    handler: src/handlers/tasks.createTask
    events:
      - http:
          path: tasks
          method: post
          cors: true

  updateTask:
    handler: src/handlers/tasks.updateTask
    events:
      - http:
          path: tasks/{id}
          method: put
          cors: true

  deleteTask:
    handler: src/handlers/tasks.deleteTask
    events:
      - http:
          path: tasks/{id}
          method: delete
          cors: true

  loginUser:
    handler: src/handlers/users.loginUser
    events:
      - http:
          path: login
          method: post
          cors: true

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-task-manager-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: serverless-task-manager-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool

    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: serverless-task-manager-identity-pool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt:
                - CognitoUserPool
                - ProviderName

    CognitoAuthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: serverless-task-manager-authenticated-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: serverless-task-manager-authenticated-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource: "*"

    CognitoUnauthenticatedRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: serverless-task-manager-unauthenticated-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action: sts:AssumeRoleWithWebIdentity
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud":
                    Ref: CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": unauthenticated
        Policies:
          - PolicyName: serverless-task-manager-unauthenticated-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:GetItem
                  Resource: "*"

    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: serverless-task-manager-api

    ApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      DependsOn:
        - ApiGatewayMethodRegisterUserPost
        - ApiGatewayMethodGetTasksGet
        - ApiGatewayMethodCreateTaskPost
        - ApiGatewayMethodUpdateTaskPut
        - ApiGatewayMethodDeleteTaskDelete
        - ApiGatewayMethodLoginUserPost
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi

    ApiGatewayStage:
      Type: AWS::ApiGateway::Stage
      Properties:
        StageName: prod
        RestApiId:
          Ref: ApiGatewayRestApi
        DeploymentId:
          Ref: ApiGatewayDeployment

    ApiGatewayMethodRegisterUserPost:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        HttpMethod: POST
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - CognitoUserPoolArn
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${registerUser.Arn}/invocations"

    ApiGatewayMethodGetTasksGet:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        HttpMethod: GET
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - CognitoUserPoolArn
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getTasks.Arn}/invocations"

    ApiGatewayMethodCreateTaskPost:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        HttpMethod: POST
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - CognitoUserPoolArn
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createTask.Arn}/invocations"

    ApiGatewayMethodUpdateTaskPut:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        HttpMethod: PUT
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - CognitoUserPoolArn
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateTask.Arn}/invocations"

    ApiGatewayMethodDeleteTaskDelete:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        HttpMethod: DELETE
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - CognitoUserPoolArn
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteTask.Arn}/invocations"

    ApiGatewayMethodLoginUserPost:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResourceId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        HttpMethod: POST
        AuthorizationType: COGNITO_USER_POOLS
        AuthorizerId:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - CognitoUserPoolArn
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${loginUser.Arn}/invocations"